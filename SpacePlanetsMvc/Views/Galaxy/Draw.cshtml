@model SpacePlanetsMvc.Models.WebViewModels.GalaxyDrawViewModel

@{
    ViewData["Title"] = "Galaxy Draw";
}


<script type="text/javascript">
    var mystars = [];
    @foreach (var item in Model.GalaxyContainer.Galaxy.Stars)
    {
        @:mystars.push({x:@(item.X/10),y:@(item.Y/10),z:@(item.Z/10)});
    }
    renderFuncs = [];
function animate() {

    requestAnimationFrame(animate);

    for (index in renderFuncs) {
        (renderFuncs[index])();
    }
}
animate();

function displayGalaxy(stars) {
    var camera, scene, renderer;
	var mesh;
    var container = $('#galContainer');
    
    var camera = new THREE.PerspectiveCamera(20, container.clientWidth / container.clientHeight, 5, 3500);
    camera.position.z = 2550;

    var scene = new THREE.Scene();
    scene.fog = new THREE.Fog(0x050505, 2000, 3500);

    var particles = stars.length;
    var geometry = new THREE.BufferGeometry();
    var positions = new Float32Array(particles * 3);
    var colors = new Float32Array(particles * 3);
    var color = new THREE.Color();
    var n = 1000, n2 = n / 2;
    for (var i = 0; i < positions.length; i += 3) {

        var star = stars[i / 3];

        // positions
        positions[i] = star.x;
        positions[i + 1] = star.y;
        positions[i + 2] = star.z;

        // colors
        var vx = (1);
        var vy = (1);
        var vz = (1);
        color.setRGB(vx, vy, vz);

        colors[i] = color.r;
        colors[i + 1] = color.g;
        colors[i + 2] = color.b;
    }

    geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));
    geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3));
    geometry.computeBoundingSphere();

    var material = new THREE.PointCloudMaterial({ size: 15, vertexColors: THREE.VertexColors });

    var particleSystem = new THREE.PointCloud(geometry, material);
    scene.add(particleSystem);

    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.CreationTime = new Date();
    renderer.setClearColor(scene.fog.color);
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(container.clientWidth, container.clientHeight);

    container.append(renderer.domElement);

    window.addEventListener('resize', function() {
        camera.aspect = container.clientWidth / container.clientHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(container.clientWidth, container.clientHeight);
    }, false);

    var speed = Math.random() * 0.75 + 0.5;
    renderFuncs.push((function() {

		var time = Date.now() * 0.001;

		particleSystem.rotation.x = 0.85;
		particleSystem.rotation.y = -time * 0.13 * speed;

		renderer.render(scene, camera);
    }));
}

    $(document).ready(function(){
    displayGalaxy(mystars);
});


</script>
<div id="galContainer"></div>